// Создадим самовызывающуюся функцию, результат которой будет присвоен константе
const MathX = (function() {

    // функция fib вычисляет N-е число в ряду Фибоначчи
    function fib(n) {
        // Если n меньше или равно 1, то мы возвращаем n
        if (n <= 1) {
            return n;
        }
        // рекурсивно вызываем функцию fib(n - 1) и fib(n - 2) и складываем их результаты,
        // чтобы получить n-е число в ряду Фибоначчи
        return fib(n - 1) + fib(n - 2);
    }
    // функция fibSeries вычисляет все числа в ряду Фибоначчи до числа N
    // Параметр n определяет, до какого числа в ряду Фибоначчи мы хотим вычислить числа.
    function fibSeries(n) {
        // создаем пустой массив series, который будет содержать числа в ряду Фибоначчи.
        let series = [];
        // используем цикл for для итерации от 0 до n - 1.
        // на каждой итерации мы вызываем функцию fib(i),
        // чтобы получить i-е число в ряду Фибоначчи, и добавляем его в массив series.
        for (let i = 0; i < n; i++) {
            series.push(fib(i));
        }
        //В конце мы возвращаем массив series с вычисленными числами в ряду Фибоначчи.
        return series;
    }
    function isPrime(num) {
        // проверяем параметр num на простоту, если num меньше или равно 1,
        // то возвращаем false, т.к. простые числа начинаются с 2 и больше
        if (num <= 1) {
            return false;
        }
        // используем цикл for для проверки делителей числа num
        // на каждой итерации мы проверяем, делится ли число num на текущее значение i без остатка
        // если остаток равен 0, то число num не является простым и будет false
        // если ни одно из делений не дало остатка 0, то число num является простым и будет true
        for (let i = 2; i <= Math.sqrt(num); i++) {
            if (num % i === 0) {
                return false;
            }
        }
        return true;
    }
    // функция primeNumbers вычисляет все простые числа до числа N.
    function primeNumbers(n) {
        // создаем пустой массив primes, который будет содержать все простые числа.
        let primes = [];
        // используем цикл for для итерации от 2 до n - 1, так как простые числа начинаются с 2 и больше.
        for (let i = 2; i < n; i++) {
            // на каждой итерации мы вызываем функцию isPrime(i), чтобы проверить, является ли число i простым.
            if (isPrime(i)) {
                // если функция isPrime(i) возвращает true, то число i добавляется в массив primes.
                primes.push(i);
            }
        }

        // в конце мы возвращаем массив primes с вычисленными простыми числами.
        return primes;
    }


    // возвращаем объект с тремя свойствами: fib, fibSeries и primeNumbers,
    // которые содержат ссылки на соответствующие функции.
    return {
        fib: fib,
        fibSeries: fibSeries,
        primeNumbers: primeNumbers
    };
})();

// Пример использования
console.log(MathX.fib(9)); // 34
console.log(MathX.fibSeries(14)); // [0, 1, 1, 2, 3 (MathX), 5, 8, 13, 21, 34, 55, 89, 144, 233]
console.log(MathX.primeNumbers(25)); // [2, 3 (MathX), 5, 7, 11, 13, 17, 19, 23]